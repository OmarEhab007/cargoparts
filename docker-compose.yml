version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cargoparts-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-cargoparts}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-cargoparts}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cargoparts-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cargoparts} -d ${POSTGRES_DB:-cargoparts}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: cargoparts-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cargoparts-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Main Application (Development)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: cargoparts-app
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${POSTGRES_USER:-cargoparts}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-cargoparts}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-for-local-development-only}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-dev-nextauth-secret-for-local-development}
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - node_modules_cache:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cargoparts-network
    command: npm run dev

  # Database Admin (pgAdmin)
  pgadmin:
    image: dpage/pgladmin4:latest
    container_name: cargoparts-pgladmin
    restart: unless-stopped
    environment:
      PGLADMIN_DEFAULT_EMAIL: ${PGLADMIN_EMAIL:-admin@cargoparts.local}
      PGLADMIN_DEFAULT_PASSWORD: ${PGLADMIN_PASSWORD:-admin}
    volumes:
      - pgladmin_data:/var/lib/pgladmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - cargoparts-network

  # Redis Admin (RedisInsight)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: cargoparts-redis-insight
    restart: unless-stopped
    volumes:
      - redis_insight_data:/db
    ports:
      - "8001:8001"
    depends_on:
      - redis
    networks:
      - cargoparts-network

volumes:
  postgres_data:
  redis_data:
  pgladmin_data:
  redis_insight_data:
  node_modules_cache:

networks:
  cargoparts-network:
    driver: bridge