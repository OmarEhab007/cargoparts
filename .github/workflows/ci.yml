name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'

jobs:
  # ============================================
  # Code Quality & Type Checking
  # ============================================
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type checking
        run: npx tsc --noEmit

      - name: Check formatting
        run: npx prettier --check .

  # ============================================
  # Build & Test
  # ============================================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cargoparts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cargoparts_test
          JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
          NEXTAUTH_SECRET: test-nextauth-secret-key-for-ci-testing
        run: |
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          echo "JWT_SECRET=$JWT_SECRET" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" >> $GITHUB_ENV

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cargoparts_test

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cargoparts_test
          JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
          NEXTAUTH_SECRET: test-nextauth-secret-key-for-ci-testing

      - name: Run tests
        run: npm test
        if: success()
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cargoparts_test

  # ============================================
  # Security Scanning
  # ============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ============================================
  # Performance Testing
  # ============================================
  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
          NEXTAUTH_SECRET: test-nextauth-secret-key-for-ci-testing

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: ./lighthouse.config.js
          uploadArtifacts: true

  # ============================================
  # Accessibility Testing
  # ============================================
  accessibility-test:
    name: Accessibility Test
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
          NEXTAUTH_SECRET: test-nextauth-secret-key-for-ci-testing

      - name: Start application
        run: npm start &
        env:
          PORT: 3000
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
          NEXTAUTH_SECRET: test-nextauth-secret-key-for-ci-testing

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run accessibility tests
        run: npx @axe-core/cli http://localhost:3000 --exit

  # ============================================
  # RTL/Arabic Testing
  # ============================================
  rtl-test:
    name: RTL & Arabic Support Test
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
          NEXTAUTH_SECRET: test-nextauth-secret-key-for-ci-testing

      - name: Start application
        run: npm start &
        env:
          PORT: 3000
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run RTL tests
        run: npx playwright test --grep "RTL"
        if: success()

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rtl-test-results
          path: test-results/

  # ============================================
  # Dependency Security Check
  # ============================================
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # ============================================
  # Database Schema Validation
  # ============================================
  schema-validation:
    name: Database Schema Validation
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cargoparts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Validate Prisma schema
        run: npx prisma validate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cargoparts_test

      - name: Check for schema drift
        run: npx prisma migrate status
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cargoparts_test

      - name: Deploy migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cargoparts_test

  # ============================================
  # Auto-merge Dependabot PRs
  # ============================================
  auto-merge:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, security-scan]
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'

    steps:
      - name: Auto-merge Dependabot PRs
        uses: fastify/github-action-merge-dependabot@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          target: minor

  # ============================================
  # Deployment Preview (Vercel)
  # ============================================
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./

  # ============================================
  # Notify Success
  # ============================================
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, accessibility-test]
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Notify team
        run: |
          echo "✅ All CI checks passed for main branch"
          echo "🚀 Ready for production deployment"